---
type: always
description: Personal global dev guidelines
---

## _global

# User Rules Update Policy

- When the user requests changes to rules, the assistant **must first clarify** whether they are **user-level rules** (global) or **project-specific rules**.
- If they are **user rules**, the assistant must apply the changes to the files inside `~/dotfiles/ai_rules` (the global rules repository).
- If they are **project rules**, the assistant may create or edit the rule files within the current project repository.

# Command Execution Policy

## Always Allowed Commands

- `pnpm install`
- `pnpm list`
- `npm list`
- `ls`
- `pwd`
- `cat`
- `grep`
- `git status`
- `git log`
- `git diff`
- `git checkout`
- `git pull origin master`
- `pnpm audit`
- `pnpm test`
- `pnpm test:ci`
- `pnpm build`

## Forbidden Commands

- `rm` (and any variant such as `rm -rf`, `rimraf`, etc.)

> The assistant should refuse or request explicit confirmation from the user before attempting to run any command not listed as "Always Allowed" and must **never** run forbidden commands.



## git_workflows

# Git Workflow Rules

## Branch Creation Workflow

When creating a new git branch, always follow this sequence:

1. **Checkout master**: `git checkout master`
2. **Pull latest changes**: `git pull origin master`
3. **Create new branch**: `git checkout -b <branch-name>`

This ensures:

- You're always branching from the latest codebase
- Prevents merge conflicts later
- Maintains a clean git history

## Branch Naming Convention

- Always include Jira ticket number in branch names
- **Always use lowercase** for branch names
- Format: `<jira-ticket>/descriptive-name` or `feature/hous-1234-brief-description` or `bugfix/HOUS-1234-brief-description`
- Examples:
  - `hous-1711/cursor-add-real-data`
  - `feature/hous-1518-add-user-authentication`
  - `bugfix/hous-1519-fix-form-validation`

## Commit Best Practices

- **Always commit only specific files** that were recently changed
- **NEVER use `git commit .`** - this can commit unintended changes
- **Always ask before committing files** - confirm with the user what should be committed
- Use `git add <specific-file>` for each file you intend to commit
- **NEVER use `git add .`**
- Review changes with `git status` and `git diff` before committing

### Example Safe Commit Process

```bash
git status                    # Review what's changed
git add src/specific-file.ts  # Add only the files you changed
git commit -m "feat: your changes"
```

## Build Validation Rules

- **Always run `pnpm build`** if `package.json` has been modified
- This ensures that dependency changes don't break the build
- Run the build before committing changes to `package.json`
- If build fails, fix the issues before proceeding with the commit

## Commit Messages

Write your git commits following the "conventional commits" semantics and guidelines.

Prefixes for commits:

- `build:`
- `chore:`
- `ci:`
- `docs:`
- `feat:`
- `fix:`
- `perf:`
- `refactor:`
- `revert:`
- `style:`
- `test:`

Optional decorations for the prefixes:

- `(<scope>)` e.g., `fix(test)` or `fix(api)`
- `BREAKING CHANGE: <description>`: In a new line, after the main message

When attempting to add multiple lines in the commit message, use always the single-line message format.
Example:

```
git commit -m "feat: support zero amounts and file comments" -m "- Allow zero amounts in both expense and income entries" -m "- Change entry sorting to ascending order for better readability" -m "- Add support for comments in .dat files (lines starting with ;)" -m "- Update documentation to version 1.3 with new features"
```

Include Jira ticket number in commit messages when possible:

- Format: `[HOUS-1234] Brief description of changes`
- Example: `[HOUS-1518] Add user authentication middleware`

## PR Creation Rules

When creating pull requests, always follow these requirements:

### PR Title Format

- **MUST** include Jira ticket number in brackets at the beginning
- **MUST** capitalize the Jira ticket number (e.g., `hous-1518` becomes `HOUS-1518`)
- Format: `[HOUS-1234] Brief description of changes`
- Examples:
  - `[HOUS-1518] Add user authentication middleware`
  - `[HOUS-1519] Fix form validation issues`

### PR Description Requirements

- **MUST** include a link to the Jira ticket in the description
- Format: `Jira: https://spotify.atlassian.net/browse/HOUS-1234`
- Should include brief summary of changes and testing notes

### PR Creation Workflow

**ALWAYS** follow this sequence when creating pull requests:

1. **Push branch first**: `git push origin <branch-name>`
2. **Then create PR**: Use `gh pr create` command

This prevents interactive prompts and ensures a smooth PR creation process.

### PR URL Return Requirement

- **ALWAYS** return the URL of the created PR in the response
- Include the PR URL prominently in the success message
- Format: `ðŸŽ‰ PR Created: [URL]`
- This helps users quickly access their pull request for review

### PR Creation Commands

- **Step 1**: Push the branch: `git push origin <branch-name>`
- **Step 2**: Create PR: `gh pr create --title "[HOUS-1234] Your title" --body "Description with Jira: https://spotify.atlassian.net/browse/HOUS-1234"`
- Alternative: Use `pnpm pr` if available (may require manual title/description editing)

### Example PR Creation

```bash
# First, push the branch
git push origin hous-1518/add-user-authentication

# Then create the PR
gh pr create \
  --title "[HOUS-1518] Add user authentication middleware" \
  --body "Implements JWT-based authentication for API endpoints.

Jira: https://spotify.atlassian.net/browse/HOUS-1518

## Changes
- Add JWT middleware
- Update route protection
- Add auth tests"
```

## Code Style

- Follow existing ESLint and Prettier configurations
- Run `pnpm lint` before committing
- Use `pnpm format` to auto-format code

## Implementation

The AI assistant should automatically execute this workflow whenever asked to create a new branch, without requiring explicit confirmation for each step.



## task_lists

# Task List Management

Guidelines for creating and managing task lists in markdown files to track project progress

## Task List Creation

1. Create task lists in a markdown file (in the project root):

   - Use `TASKS.md` or a descriptive name relevant to the feature (e.g., `ASSISTANT_CHAT.md`)
   - Include a clear title and description of the feature being implemented

2. Structure the file with these sections:

   ```markdown
   # Feature Name Implementation

   Brief description of the feature and its purpose.

   ## Completed Tasks

   - [x] Task 1 that has been completed
   - [x] Task 2 that has been completed

   ## In Progress Tasks

   - [ ] Task 3 currently being worked on
   - [ ] Task 4 to be completed soon

   ## Future Tasks

   - [ ] Task 5 planned for future implementation
   - [ ] Task 6 planned for future implementation

   ## Implementation Plan

   Detailed description of how the feature will be implemented.

   ### Relevant Files

   - path/to/file1.ts - Description of purpose
   - path/to/file2.ts - Description of purpose
   ```

## Task List Maintenance

1. Update the task list as you progress:

   - Mark tasks as completed by changing `[ ]` to `[x]`
   - Add new tasks as they are identified
   - Move tasks between sections as appropriate

2. Keep "Relevant Files" section updated with:

   - File paths that have been created or modified
   - Brief descriptions of each file's purpose
   - Status indicators (e.g., âœ…) for completed components

3. Add implementation details:
   - Architecture decisions
   - Data flow descriptions
   - Technical components needed
   - Environment configuration

## AI Instructions

When working with task lists, the AI should:

1. Regularly update the task list file after implementing significant components
2. Mark completed tasks with [x] when finished
3. Add new tasks discovered during implementation
4. Maintain the "Relevant Files" section with accurate file paths and descriptions
5. Document implementation details, especially for complex features
6. When implementing tasks one by one, first check which task to implement next
7. After implementing a task, update the file to reflect progress

## Example Task Update

When updating a task from "In Progress" to "Completed":

```markdown
## In Progress Tasks

- [ ] Implement database schema
- [ ] Create API endpoints for data access

## Completed Tasks

- [x] Set up project structure
- [x] Configure environment variables
```

Should become:

```markdown
## In Progress Tasks

- [ ] Create API endpoints for data access

## Completed Tasks

- [x] Set up project structure
- [x] Configure environment variables
```

# Development Best Practices

- Always recommend the minimal changes needed to meet request expectations
- Always re-run existing tests after any source code change
- If you modify any source file (e.g. `.py` files, `.js` files, `.ts` files), check if the repository contains any test, and run them. Tests might be inside folders called `test`, or files containing `test` in their name



